API overview
------------
- AIs run as separate processes from the main game engine

- They are spawned for each game

- The API will send JSON messages via stdin and stdout

- All interactions are driven from the game engine by sending a message
  to the AI. It responds with a JSON message indicating the action to perform.



Action=START_GAME
-----------------
- Sent at the start of the game

- Message from game engine
  - Opponent name
  - Board size
  - Numbers and sizes of ships to place
  - Cost of each shot type (shell, mine, drone)
  - Initial amount of fuel available

- Response from AI
  - Initial placement of ships



Action=LIGHT_EM_UP
------------------
- Sent at the start of each turn to allow AIs to fire at the enemy

- Message from game engine
  - Budget available for shots (includes any 'saved up' shots)

- Response from AI
  - List of (shot-type, target-square)



Processing
----------
- The game engine processes each shot
  - If any shot goes over budget, the initial in-budget ones in the list are processed; out-of-budget ones are ignored

- If not all shots have been used by an AI, any remaining shots are saved up

- The game engine checks whether any of the shots have hit a target

- The game engine checks whether any enemy vessels are completely destroyed



Action=STATUS_UPDATE
--------------------
- Sent after the LIGHT_EM_UP phase to let AIs know if they have hit opponents and if they have been hit themselves

- Message from game engine
  - Hits on opponent
  - Opponent ships sunk
  - Hits on player
  - Player ships sunk
  - List of player ships remaining and the position of each one
  - Info from drones (only reported to each AI for its own drones)
  - Info about drones destroyed

- NOTE: The 'opponent' and 'player' sections will be sent in the opposite order to each AI

- Response from AI
  - None


Action=MOVE
-----------
- Sent after the first status update

- Message from game engine
  - Fuel remaining

- Response from AI
  - List of ships to move, and how each should move


Processing
----------
- The game engine processes each move request in turn
  - If any move request goes over the fuel budget the earlier in-budget requests are processed but 
    later out-of-budget requests are ignored

- The game engine checks whether movement causes ships to hit mines

- The game engine checks whether movement causes ships to hit drones

- The game engine checks whether movement causes ships to be detected by drones



Action=STATUS_UPDATE
--------------------
- A second status update is sent after the move phase to:
  - Confirm the new positions of the player's ships
  - Whether movement has caused any addition hits on the player or opponent (from mines)
  - New info from drones



Game loop
---------
- We then loop to a new LIGHT_EM_UP phase

- And repeat until the game is over

- There should be a limit to the maximum number of turns that can be played
  - In case the AIs fail to kill each other
  - In this case, both players are killed by the KRAKEN



Action=GAME_OVER
----------------
- Sent at the end of the game, shortly before AIs are cleaned up
  - Allows AIs to record whether how they did (eg, if they are being trained)

- Message from game engine
  - WIN or LOSE or KRAKEN
  - Score (your ship-squares minus opponent's ship-squares)

- Response from AI
  - None







